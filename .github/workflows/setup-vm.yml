name: Setup SonarQube VM (One-time)

# Este pipeline se ejecuta SOLO cuando t√∫ lo dispares manualmente
on:
  workflow_dispatch:
    inputs:
      vm_ip:
        description: 'IP de tu VM de Azure'
        required: true
        default: '172.177.237.92'
      vm_user:
        description: 'Usuario de la VM'
        required: true
        default: 'vmadmin'

jobs:
  setup-sonarqube-vm:
    name: Configurar SonarQube en VM
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v3
    
    - name: Instalar sshpass para autenticaci√≥n por contrase√±a
      run: sudo apt-get update && sudo apt-get install -y sshpass
    
    - name: Conectar y configurar VM con contrase√±a
      env:
        VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
      run: |
        export SSHPASS="$VM_PASSWORD"
        
        # Agregar host a known_hosts para evitar prompt
        ssh-keyscan -H ${{ github.event.inputs.vm_ip }} >> ~/.ssh/known_hosts 2>/dev/null || true
        
        sshpass -e ssh -o StrictHostKeyChecking=no ${{ github.event.inputs.vm_user }}@${{ github.event.inputs.vm_ip }} << 'EOF'
        
        echo "=== Actualizando sistema ==="
        sudo apt update && sudo apt upgrade -y
        
        echo "=== Instalando Docker ==="
        sudo apt install docker.io -y
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER
        
        echo "=== Configurando firewall para SonarQube ==="
        sudo ufw allow 9000/tcp || echo "UFW no disponible o ya configurado"
        
        echo "=== Configurando SonarQube ==="
        mkdir -p ~/sonarqube
        cd ~/sonarqube
        
        cat > docker-compose.yml << 'COMPOSE_EOF'
        version: '3.8'
        services:
          sonarqube:
            image: sonarqube:community
            container_name: sonarqube
            restart: unless-stopped
            environment:
              - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
            ports:
              - "9000:9000"
            volumes:
              - sonarqube_data:/opt/sonarqube/data
              - sonarqube_logs:/opt/sonarqube/logs
              - sonarqube_extensions:/opt/sonarqube/extensions
        
        volumes:
          sonarqube_data:
          sonarqube_logs:
          sonarqube_extensions:
        COMPOSE_EOF
        
        echo "=== Iniciando SonarQube con Docker Compose V2 ==="
        sudo docker compose up -d
        
        echo "=== Esperando que SonarQube inicie ==="
        sleep 120
        
        echo "=== Verificando estado ==="
        sudo docker ps
        curl -s http://localhost:9000/api/system/status || echo "SonarQube a√∫n iniciando..."
        
        EOF
    
    - name: Verificar SonarQube desde GitHub
      run: |
        echo "Esperando que SonarQube est√© disponible externamente..."
        sleep 60
        
        for i in {1..10}; do
          if curl -s http://${{ github.event.inputs.vm_ip }}:9000/api/system/status; then
            echo "‚úÖ SonarQube est√° respondiendo!"
            break
          else
            echo "‚è≥ Intento $i/10: SonarQube a√∫n iniciando..."
            sleep 30
          fi
        done
    
    - name: Mostrar informaci√≥n de configuraci√≥n
      run: |
        echo "üéâ ¬°Configuraci√≥n completada!"
        echo ""
        echo "üìã Pr√≥ximos pasos manuales:"
        echo "1. Accede a: http://${{ github.event.inputs.vm_ip }}:9000"
        echo "2. Login: admin / admin"
        echo "3. Cambia la contrase√±a por defecto"
        echo "4. Crea proyecto local con key: cybervault"
        echo "5. Ve a Administration > Security > Users > admin > Tokens"
        echo "6. Genera token con nombre: github-actions-token"
        echo "7. Copia el token generado"
        echo ""
        echo "üìù GitHub Secrets a configurar:"
        echo "SONAR_HOST_URL: http://${{ github.event.inputs.vm_ip }}:9000"
        echo "SONAR_TOKEN: [tu token generado]"
        echo ""
        echo "‚ö†Ô∏è IMPORTANTE:"
        echo "- Aseg√∫rate de que el puerto 9000 est√© abierto en Azure"
        echo "- Si no funciona, verifica el Network Security Group en Azure"